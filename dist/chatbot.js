(()=>{var e={227:e=>{!function(){"use strict";const t={githubUsername:"mihaip",openaiModel:"gpt-3.5-turbo",maxTokens:150,temperature:.7,githubKeywords:["github","repository","repo","repositories","code","commits","contributions","followers","following","projects"]};let n=null,o=null,s=[];function a(e,t=""){return`You are Mihai Popescu chatting casually about yourself. Keep responses short and conversational.\n\nHere is your complete website content and professional information:\n${e}\n\n${t}\n\nTONE & STYLE:\n- Talk like you're having a casual conversation with a friend\n- Keep answers brief (1-2 sentences max unless asked for details)\n- Use "I" naturally - you ARE Mihai\n- Be enthusiastic but not over-the-top\n- Skip formal language - be relaxed and approachable\n\nGUIDELINES:\n- Answer from the info above, but keep it concise\n- If someone asks about tech stuff, mention it briefly then ask if they want more details\n- For GitHub questions, I can pull live stats\n- If you don't know something, just say so casually\n- Use emojis sparingly (maybe 1 per response max)`}async function i(){n||(n=await async function(){const e=await fetch("html-files-index.json");if(!e.ok)throw new Error(`Failed to load content files index: ${e.status}`);const t=await e.json();let n="";for(const e of t)try{const t=await fetch(e);if(t.ok){const o=await t.text(),s=e.endsWith(".md")?"Markdown":"HTML";n+=`\n\n=== Content from ${e} (${s}) ===\n${o}`}else console.warn(`Could not load ${e}: ${t.status}`)}catch(t){console.warn(`Error loading ${e}:`,t)}return n}(),o=a(n))}async function r(e,o){await i();const r={role:"user",content:e,timestamp:new Date};s.push(r);try{let i="";if(function(e){const n=e.toLowerCase();return t.githubKeywords.some(e=>n.includes(e))}(e)){const e=await async function(){try{const e=await fetch(`https://api.github.com/users/${t.githubUsername}`);if(!e.ok)return null;const n=await e.json();return{public_repos:n.public_repos,followers:n.followers,following:n.following,created_at:n.created_at,bio:n.bio,location:n.location,company:n.company}}catch(e){return console.error("Error fetching GitHub stats:",e),null}}();e&&(i=function(e){return`\nCURRENT GITHUB STATISTICS:\n- Public repositories: ${e.public_repos}\n- Followers: ${e.followers}\n- Following: ${e.following}\n- Member since: ${new Date(e.created_at).getFullYear()}\n${e.bio?`- Bio: ${e.bio}`:""}\n${e.location?`- Location: ${e.location}`:""}\n${e.company?`- Company: ${e.company}`:""}`}(e))}const r=await async function(e,o,i){const r=[{role:"system",content:a(n,o)},...s.slice(-10),{role:"user",content:e}],c=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${i}`,"Content-Type":"application/json"},body:JSON.stringify({model:t.openaiModel,messages:r,max_tokens:t.maxTokens,temperature:t.temperature})});if(!c.ok)throw new Error(`OpenAI API error: ${c.status}`);return(await c.json()).choices[0].message.content}(e,i,o),c={role:"assistant",content:r,timestamp:new Date};return s.push(c),r}catch(e){console.error("Error processing message:",e);let t="I'm sorry, I encountered an error processing your message. Please try again.";(e.message.includes("429")||e.message.includes("high demand"))&&(t="I'm currently experiencing high demand. Please wait a moment and try again. 🕐");const n={role:"assistant",content:t,timestamp:new Date};return s.push(n),t}}function c(){s=[]}function l(){return[...s]}e.exports&&(e.exports={processMessage:r,clearHistory:c,getHistory:l,initializeChatbot:i}),"undefined"!=typeof window&&(window.processMessage=r,window.clearHistory=c,window.getHistory=l,window.initializeChatbot=i)}()},5694:(e,t,n)=>{"use strict";n(227),n(6882),document.addEventListener("DOMContentLoaded",function(){let e=document.getElementById("chatbot-container");e||(e=document.createElement("div"),e.id="chatbot-container",document.body.appendChild(e)),console.log("Chatbot initialized successfully")})},6882:e=>{!function(){"use strict";const t="chatbot-container";let n=!1;function o(){const e=document.querySelector(".chatbot-messages");e&&e.scrollTo({top:e.scrollHeight,behavior:"smooth"})}function s(e,t,n=!1){const s=document.querySelector(".chatbot-messages");if(!s)return;const a=document.createElement("div");a.className=`message ${t}`,n&&a.classList.add("error");const i=e.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/\n/g,"<br>").replace(/(content\/[^\s]+\.html)/g,'<a href="$1" target="_blank" class="chatbot-link">$1</a>').replace(/^• /gm,'<span class="bullet">•</span> '),r=(new Date).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"});a.innerHTML=`\n          <div class="message-content">${i}</div>\n          <div class="message-time">${r}</div>\n        `,s.appendChild(a),o()}function a(){const e=document.querySelector(".chatbot-window"),t=document.querySelector(".chatbot-notification");if(e)if(n)i();else{e.style.display="flex",n=!0,t&&(t.style.display="none");const o=document.querySelector(".chatbot-input");o&&setTimeout(()=>o.focus(),100)}}function i(){const e=document.querySelector(".chatbot-window");e&&(e.style.display="none",n=!1)}async function r(e){e.trim()&&s("⚠️ Chatbot is not configured. Please set the OPENAI_API_KEY environment variable.","bot",!0)}function c(){setTimeout(()=>{s("👋 Hi there! I'm an AI assistant that can answer questions about Mihai Popescu. I know about his experience, skills, projects, and can even fetch his latest GitHub stats. What would you like to know?","bot")},500)}function l(){const e=document.querySelector(".chatbot-messages");e&&(e.innerHTML="");const t="undefined"!=typeof window&&window.clearHistory?window.clearHistory:"undefined"!=typeof clearHistory?clearHistory:null;t&&t(),c()}e.exports&&(e.exports={toggleChatbot:a,sendMessage:r,clearChat:l,addMessage:s}),"undefined"!=typeof window&&(window.toggleChatbot=a,window.clearChat=l,window.sendMessage=r,window.addMessage=s),document.addEventListener("DOMContentLoaded",function(){(function(){let e=document.getElementById(t);return e||(e=document.createElement("div"),e.id=t,document.body.appendChild(e)),e}()).innerHTML='\n      <div class="chatbot-toggle" title="Chat with AI Assistant">\n        <i class="fas fa-comments"></i>\n        <div class="chatbot-notification">💬</div>\n      </div>\n      \n      <div class="chatbot-window" style="display: none;">\n        <div class="chatbot-header">\n          <div class="chatbot-title">\n            <i class="fas fa-robot"></i>\n            <span>Ask about Mihai</span>\n          </div>\n          <button class="chatbot-close" title="Close chat">\n            <i class="fas fa-times"></i>\n          </button>\n        </div>\n        \n        <div class="chatbot-messages"></div>\n        \n        <div class="chatbot-input-container">\n          <form class="chatbot-input-form">\n            <input \n              type="text" \n              class="chatbot-input" \n              placeholder="Ask me about my experience, skills, or projects..."\n              autocomplete="off"\n            />\n            <button type="submit" class="chatbot-send" title="Send message">\n              <i class="fas fa-paper-plane"></i>\n            </button>\n          </form>\n        </div>\n      </div>\n    ',function(){const e=document.querySelector(".chatbot-toggle"),t=document.querySelector(".chatbot-close"),n=document.querySelector(".chatbot-input-form"),o=document.querySelector(".chatbot-input");e&&e.addEventListener("click",a),t&&t.addEventListener("click",i),n&&n.addEventListener("submit",e=>{e.preventDefault();const t=o.value.trim();t&&(r(t),o.value="")}),o&&o.addEventListener("keypress",e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),n&&n.dispatchEvent(new Event("submit")))})}(),c()})}()}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(227),n(6882),n(5694)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,