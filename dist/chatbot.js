(()=>{var t={227:t=>{!function(){"use strict";const e={githubUsername:"MihaiOnSoftware",openaiModel:"gpt-3.5-turbo",maxTokens:150,temperature:.7,githubKeywords:["github","repository","repo","repositories","code","commits","contributions","followers","following","projects"],github:{baseUrl:"https://api.github.com",repoLimit:10,eventLimit:5,displayRepoLimit:5,displayActivityLimit:3,excludePatterns:["nulogy/"]}};class n{constructor(){this.htmlContent=null,this.systemPrompt=null,this.conversationHistory=[]}async loadContentIndex(){const t=await fetch("html-files-index.json");if(!t.ok)throw new Error(`Failed to load content files index: ${t.status}`);return t.json()}async loadSingleContentFile(t){const e=await fetch(t),n=await e.text(),o=t.endsWith(".md")?"Markdown":"HTML";return`\n\n=== Content from ${t} (${o}) ===\n${n}`}async loadAllContentFiles(t){let e="";for(const n of t)e+=await this.loadSingleContentFile(n);return e}async loadContentFiles(){const t=await this.loadContentIndex();return this.loadAllContentFiles(t)}createSystemPrompt(t,e=""){return`\n            You are Mihai Popescu, a software developer, chatting casually about yourself. Keep responses short and conversational.\n\n            Here is your complete website content and professional information:\n            ${t}\n\n            ${e}\n\n            TONE & STYLE:\n            - Talk like you're having a casual conversation with a friend\n            - Keep answers brief (1-2 sentences max unless asked for details)\n            - Use "I" naturally - you ARE Mihai\n            - Be enthusiastic but not over-the-top\n            - Skip formal language - be relaxed and approachable\n\n            GUIDELINES:\n            - Answer from the info above, but keep it concise\n            - If someone asks about tech stuff, mention it briefly then ask if they want more details\n            - For GitHub questions, I can pull live stats\n            - If you don't know something, just say so casually\n            - Use emojis sparingly (maybe 1 per response max)\n            `}messageRequiresGithubStats(t){const n=t.toLowerCase();return e.githubKeywords.some(t=>n.includes(t))}shouldFilterRepo(t){const n=t.html_url||t.url||"",o=t.name||"",s=t.full_name||"";return e.github.excludePatterns.some(t=>n.includes(t)||o.includes(t)||s.includes(t))}shouldFilterEvent(t){const n=t.repo?.name||"";return e.github.excludePatterns.some(t=>n.includes(t))}buildGitHubUrl(t){return`${e.github.baseUrl}/users/${e.githubUsername}${t}`}async fetchGitHubData(t,e){try{const e=await fetch(t);return e.ok?await e.json():null}catch(t){return console.error(e,t),null}}async fetchGitHubStats(){try{const t=await this.fetchGitHubData(this.buildGitHubUrl(""),"Error fetching GitHub profile:");if(!t)return null;const[e,n]=await Promise.allSettled([this.fetchGitHubRepos(),this.fetchGitHubEvents()]);return{...this.extractBasicProfile(t),repositories:"fulfilled"===e.status?e.value:null,recent_activity:"fulfilled"===n.status?n.value:null}}catch(t){return console.error("Error fetching GitHub stats:",t),null}}extractBasicProfile(t){return{public_repos:t.public_repos,followers:t.followers,following:t.following,created_at:t.created_at,bio:t.bio,location:t.location,company:t.company}}async fetchGitHubRepos(){const t=this.buildGitHubUrl(`/repos?sort=updated&per_page=${e.github.repoLimit}`),n=await this.fetchGitHubData(t,"Error fetching GitHub repositories:");return n?n.filter(t=>!this.shouldFilterRepo(t)).map(this.transformRepo):null}async fetchGitHubEvents(){const t=this.buildGitHubUrl(`/events?per_page=${e.github.eventLimit}`),n=await this.fetchGitHubData(t,"Error fetching GitHub events:");return n?n.filter(t=>!this.shouldFilterEvent(t)).map(this.transformEvent.bind(this)).filter(t=>t.repo):null}transformRepo(t){return{name:t.name,description:t.description,language:t.language,stars:t.stargazers_count,updated_at:t.updated_at,url:t.html_url}}transformEvent(t){return{type:t.type,repo:t.repo?.name,created_at:t.created_at,action:this.formatEventAction(t)}}formatEventAction(t){switch(t.type){case"PushEvent":const e=t.payload?.commits?.length||0;return`Pushed ${e} commit${1!==e?"s":""}`;case"CreateEvent":return`Created ${t.payload?.ref_type} ${t.payload?.ref}`;case"PullRequestEvent":return`${t.payload?.action} pull request`;case"IssuesEvent":return`${t.payload?.action} issue`;case"ForkEvent":return"Forked repository";case"WatchEvent":return"Starred repository";default:return t.type.replace("Event","")}}formatGithubStatsForContext(t){return[this.formatBasicGitHubStats(t),this.formatRepositoriesSection(t.repositories),this.formatActivitySection(t.recent_activity)].filter(Boolean).join("\n")}formatBasicGitHubStats(t){return`\n            CURRENT GITHUB STATISTICS:\n            - Public repositories: ${t.public_repos}\n            - Followers: ${t.followers}\n            - Following: ${t.following}\n            - Member since: ${new Date(t.created_at).getFullYear()}\n            - Bio: ${t.bio}\n            - Location: ${t.location}\n            - Company: ${t.company}\n            `}formatRepositoriesSection(t){return t?.length?`\n            RECENT REPOSITORIES:\n            ${t.slice(0,e.github.displayRepoLimit).map(this.formatRepository).join("\n            ")}`:null}formatRepository(t){return[`- ${t.name}`,t.language?`(${t.language})`:"",t.description?`- ${t.description}`:"",t.stars>0?`⭐${t.stars}`:"",`(Updated: ${new Date(t.updated_at).toLocaleDateString()})`].filter(Boolean).join(" ")}formatActivitySection(t){if(!t?.length)return"\n            NOTE: No recent public GitHub activity to display.";const e=this.calculateCommitStats(t);return this.formatActivitySummary(e)}formatActivitySummary(t){return 0===t.totalCommits?"\n            RECENT ACTIVITY: No commits in recent public activity.":`\n            RECENT ACTIVITY SUMMARY:\n            - Total commits in recent activity: ${t.totalCommits}\n            - Active repositories: ${t.activeRepos}\n            - Most recent activity: ${t.mostRecentDate}`}calculateCommitStats(t){const e={totalCommits:0,activeRepos:new Set,mostRecentDate:null};return t.forEach(t=>{this.processActivityForStats(t,e)}),{totalCommits:e.totalCommits,activeRepos:e.activeRepos.size,mostRecentDate:e.mostRecentDate?.toLocaleDateString()||"Unknown"}}processActivityForStats(t,e){if("PushEvent"===t.type){const n=this.extractCommitCount(t.action);e.totalCommits+=n}const n=this.extractRepoName(t.repo);e.activeRepos.add(n),this.updateMostRecentDate(t.created_at,e)}extractCommitCount(t){const e=t.match(/Pushed (\d+) commit/);return e?parseInt(e[1],10):0}extractRepoName(t){return t.replace("MihaiOnSoftware/","")}updateMostRecentDate(t,e){const n=new Date(t);(!e.mostRecentDate||n>e.mostRecentDate)&&(e.mostRecentDate=n)}formatActivity(t){const e=new Date(t.created_at).toLocaleDateString(),n=this.extractRepoName(t.repo);return`- ${t.action} in ${n} (${e})`}async initialize(){this.htmlContent||(this.htmlContent=await this.loadContentFiles(),this.systemPrompt=this.createSystemPrompt(this.htmlContent))}addMessageToHistory(t,e){const n={role:t,content:e,timestamp:new Date};return this.conversationHistory.push(n),n}async getGithubContextIfNeeded(t){if(!this.messageRequiresGithubStats(t))return"";const e=await this.fetchGitHubStats();return e?this.formatGithubStatsForContext(e):""}createErrorResponse(t){return t.message.includes("429")||t.message.includes("high demand")?"I'm currently experiencing high demand. Please wait a moment and try again. 🕐":"I'm sorry, I encountered an error processing your message. Please try again."}async processMessage(t){await this.initialize(),this.addMessageToHistory("user",t);try{const e=await this.getGithubContextIfNeeded(t),n=await this.generateAIResponse(t,e);return this.addMessageToHistory("assistant",n),n}catch(t){console.error("Error processing message:",t);const e=this.createErrorResponse(t);return this.addMessageToHistory("assistant",e),e}}buildMessagesForAI(t,e){return[{role:"system",content:this.createSystemPrompt(this.htmlContent,e)},...this.conversationHistory.slice(-10),{role:"user",content:t}]}async callOpenAIAPI(t){const n=await fetch("/api/chat",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:e.openaiModel,messages:t,max_tokens:e.maxTokens,temperature:e.temperature})});if(!n.ok){const t=await n.json().catch(()=>({}));throw new Error(t.error||`Server error: ${n.status}`)}return(await n.json()).choices[0].message.content}async generateAIResponse(t,e){const n=this.buildMessagesForAI(t,e);return this.callOpenAIAPI(n)}clearHistory(){this.conversationHistory=[]}getHistory(){return[...this.conversationHistory]}}let o=null;function s(){return o||(o=new n),o}async function a(t){return s().processMessage(t)}function i(){s().clearHistory()}function r(){return s().getHistory()}async function c(){return s().initialize()}t.exports&&(t.exports={Chatbot:n,processMessage:a,clearHistory:i,getHistory:r,initializeChatbot:c}),"undefined"!=typeof window&&(window.processMessage=a,window.clearHistory=i,window.getHistory=r,window.initializeChatbot=c)}()},5694:(t,e,n)=>{"use strict";n(227),n(6882),document.addEventListener("DOMContentLoaded",function(){let t=document.getElementById("chatbot-container");t||(t=document.createElement("div"),t.id="chatbot-container",document.body.appendChild(t)),console.log("Chatbot initialized successfully")})},6882:t=>{!function(){"use strict";const e="chatbot-container";let n=!1;function o(){const t=document.querySelector(".chatbot-messages");t&&t.scrollTo({top:t.scrollHeight,behavior:"smooth"})}function s(t,e,n=!1){const s=document.querySelector(".chatbot-messages");if(!s)return;const a=document.createElement("div");a.className=`message ${e}`,n&&a.classList.add("error");const i=t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/\n/g,"<br>").replace(/(content\/[^\s]+\.html)/g,'<a href="$1" target="_blank" class="chatbot-link">$1</a>').replace(/^• /gm,'<span class="bullet">•</span> '),r=(new Date).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"});a.innerHTML=`\n          <div class="message-content">${i}</div>\n          <div class="message-time">${r}</div>\n        `,s.appendChild(a),o()}function a(t){t&&t.parentNode&&t.parentNode.removeChild(t)}function i(){const t=document.querySelector(".chatbot-window");if(t)if(n)r();else{t.style.display="flex",n=!0;const e=document.querySelector(".chatbot-input");e&&setTimeout(()=>e.focus(),100)}}function r(){const t=document.querySelector(".chatbot-window");t&&(t.style.display="none",n=!1)}async function c(t){if(!t.trim())return;s(t,"user");const e=function(){const t=document.querySelector(".chatbot-messages");if(!t)return null;const e=document.createElement("div");return e.className="message bot typing",e.innerHTML='\n          <div class="message-content">\n            <div class="typing-indicator">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        ',t.appendChild(e),o(),e}();try{const n="undefined"!=typeof window&&window.processMessage?window.processMessage:"undefined"!=typeof processMessage?processMessage:null;if(!n)throw new Error("processMessage function not available");const o=await n(t);a(e),s(o,"bot")}catch(t){a(e),console.error("Error sending message:",t),s("Sorry, I encountered an error. Please try again.","bot",!0)}}function l(){setTimeout(()=>{s("👋 Hi there! I'm an AI assistant that can answer questions about Mihai Popescu. I know about his experience, skills, projects, and can even fetch his latest GitHub stats. What would you like to know?","bot")},500)}function u(){const t=document.querySelector(".chatbot-messages");t&&(t.innerHTML="");const e="undefined"!=typeof window&&window.clearHistory?window.clearHistory:"undefined"!=typeof clearHistory?clearHistory:null;e&&e(),l()}t.exports&&(t.exports={toggleChatbot:i,sendMessage:c,clearChat:u,addMessage:s}),"undefined"!=typeof window&&(window.toggleChatbot=i,window.clearChat=u,window.sendMessage=c,window.addMessage=s),document.addEventListener("DOMContentLoaded",function(){(function(){let t=document.getElementById(e);return t||(t=document.createElement("div"),t.id=e,document.body.appendChild(t)),t}()).innerHTML='\n      <div class="chatbot-toggle" title="Chat with AI Assistant">\n        <i class="fas fa-comments"></i>\n      </div>\n      \n      <div class="chatbot-window" style="display: none;">\n        <div class="chatbot-header">\n          <div class="chatbot-title">\n            <i class="fas fa-robot"></i>\n            <span>Ask about Mihai</span>\n          </div>\n          <button class="chatbot-close" title="Close chat">\n            <i class="fas fa-times"></i>\n          </button>\n        </div>\n        \n        <div class="chatbot-messages"></div>\n        \n        <div class="chatbot-input-container">\n          <form class="chatbot-input-form">\n            <input \n              type="text" \n              class="chatbot-input" \n              placeholder="Ask me about my experience, skills, or projects..."\n              autocomplete="off"\n            />\n            <button type="submit" class="chatbot-send" title="Send message">\n              <i class="fas fa-paper-plane"></i>\n            </button>\n          </form>\n        </div>\n      </div>\n    ',function(){const t=document.querySelector(".chatbot-toggle"),e=document.querySelector(".chatbot-close"),n=document.querySelector(".chatbot-input-form"),o=document.querySelector(".chatbot-input");t&&t.addEventListener("click",i),e&&e.addEventListener("click",r),n&&n.addEventListener("submit",t=>{t.preventDefault();const e=o.value.trim();e&&(c(e),o.value="")}),o&&o.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),n&&n.dispatchEvent(new Event("submit")))})}(),l()})}()}},e={};function n(o){var s=e[o];if(void 0!==s)return s.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n(227),n(6882),n(5694)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,