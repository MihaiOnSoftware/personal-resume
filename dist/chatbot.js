(()=>{var t={227:t=>{!function(){"use strict";const e={githubUsername:"MihaiOnSoftware",openaiModel:"gpt-3.5-turbo",maxTokens:150,temperature:.7,githubKeywords:["github","repository","repo","repositories","code","commits","contributions","followers","following","projects"],github:{baseUrl:"https://api.github.com",repoLimit:10,eventLimit:5,displayRepoLimit:5,displayActivityLimit:3}};class n{constructor(){this.htmlContent=null,this.systemPrompt=null,this.conversationHistory=[]}async loadContentIndex(){const t=await fetch("html-files-index.json");if(!t.ok)throw new Error(`Failed to load content files index: ${t.status}`);return t.json()}async loadSingleContentFile(t){const e=await fetch(t),n=await e.text(),o=t.endsWith(".md")?"Markdown":"HTML";return`\n\n=== Content from ${t} (${o}) ===\n${n}`}async loadAllContentFiles(t){let e="";for(const n of t)e+=await this.loadSingleContentFile(n);return e}async loadContentFiles(){const t=await this.loadContentIndex();return this.loadAllContentFiles(t)}createSystemPrompt(t,e=""){return`\n            You are Mihai Popescu, a software developer, chatting casually about yourself. Keep responses short and conversational.\n\n            Here is your complete website content and professional information:\n            ${t}\n\n            ${e}\n\n            TONE & STYLE:\n            - Talk like you're having a casual conversation with a friend\n            - Keep answers brief (1-2 sentences max unless asked for details)\n            - Use "I" naturally - you ARE Mihai\n            - Be enthusiastic but not over-the-top\n            - Skip formal language - be relaxed and approachable\n\n            GUIDELINES:\n            - Answer from the info above, but keep it concise\n            - If someone asks about tech stuff, mention it briefly then ask if they want more details\n            - For GitHub questions, I can pull live stats\n            - If you don't know something, just say so casually\n            - Use emojis sparingly (maybe 1 per response max)\n            `}messageRequiresGithubStats(t){const n=t.toLowerCase();return e.githubKeywords.some(t=>n.includes(t))}buildGitHubUrl(t){return`${e.github.baseUrl}/users/${e.githubUsername}${t}`}async fetchGitHubData(t,e){try{const e=await fetch(t);return e.ok?await e.json():null}catch(t){return console.error(e,t),null}}async fetchGitHubStats(){try{const t=await this.fetchGitHubData(this.buildGitHubUrl(""),"Error fetching GitHub profile:");if(!t)return null;const[e,n]=await Promise.allSettled([this.fetchGitHubRepos(),this.fetchGitHubEvents()]);return{...this.extractBasicProfile(t),repositories:"fulfilled"===e.status?e.value:null,recent_activity:"fulfilled"===n.status?n.value:null}}catch(t){return console.error("Error fetching GitHub stats:",t),null}}extractBasicProfile(t){return{public_repos:t.public_repos,followers:t.followers,following:t.following,created_at:t.created_at,bio:t.bio,location:t.location,company:t.company}}async fetchGitHubRepos(){const t=this.buildGitHubUrl(`/repos?sort=updated&per_page=${e.github.repoLimit}`),n=await this.fetchGitHubData(t,"Error fetching GitHub repositories:");return n?n.map(this.transformRepo):null}async fetchGitHubEvents(){const t=this.buildGitHubUrl(`/events?per_page=${e.github.eventLimit}`),n=await this.fetchGitHubData(t,"Error fetching GitHub events:");return n?n.map(this.transformEvent.bind(this)).filter(t=>t.repo):null}transformRepo(t){return{name:t.name,description:t.description,language:t.language,stars:t.stargazers_count,updated_at:t.updated_at,url:t.html_url}}transformEvent(t){return{type:t.type,repo:t.repo?.name,created_at:t.created_at,action:this.formatEventAction(t)}}formatEventAction(t){switch(t.type){case"PushEvent":const e=t.payload?.commits?.length||0;return`Pushed ${e} commit${1!==e?"s":""}`;case"CreateEvent":return`Created ${t.payload?.ref_type} ${t.payload?.ref}`;case"PullRequestEvent":return`${t.payload?.action} pull request`;case"IssuesEvent":return`${t.payload?.action} issue`;case"ForkEvent":return"Forked repository";case"WatchEvent":return"Starred repository";default:return t.type.replace("Event","")}}formatGithubStatsForContext(t){return[this.formatBasicGitHubStats(t),this.formatRepositoriesSection(t.repositories),this.formatActivitySection(t.recent_activity)].filter(Boolean).join("\n")}formatBasicGitHubStats(t){return`\n            CURRENT GITHUB STATISTICS:\n            - Public repositories: ${t.public_repos}\n            - Followers: ${t.followers}\n            - Following: ${t.following}\n            - Member since: ${new Date(t.created_at).getFullYear()}\n            - Bio: ${t.bio}\n            - Location: ${t.location}\n            - Company: ${t.company}\n            `}formatRepositoriesSection(t){return t?.length?`\n            RECENT REPOSITORIES:\n            ${t.slice(0,e.github.displayRepoLimit).map(this.formatRepository).join("\n            ")}`:null}formatRepository(t){return[`- ${t.name}`,t.language?`(${t.language})`:"",t.description?`- ${t.description}`:"",t.stars>0?`⭐${t.stars}`:"",`(Updated: ${new Date(t.updated_at).toLocaleDateString()})`].filter(Boolean).join(" ")}formatActivitySection(t){if(!t?.length)return"\n            NOTE: No recent public GitHub activity to display.";const e=this.calculateCommitStats(t);return 0===e.totalCommits?"\n            RECENT ACTIVITY: No commits in recent public activity.":`\n            RECENT ACTIVITY SUMMARY:\n            - Total commits in recent activity: ${e.totalCommits}\n            - Active repositories: ${e.activeRepos}\n            - Most recent activity: ${e.mostRecentDate}`}calculateCommitStats(t){const e={totalCommits:0,activeRepos:new Set,mostRecentDate:null};return t.forEach(t=>{this.processActivityForStats(t,e)}),{totalCommits:e.totalCommits,activeRepos:e.activeRepos.size,mostRecentDate:e.mostRecentDate?e.mostRecentDate.toLocaleDateString():"Unknown"}}processActivityForStats(t,e){if("PushEvent"===t.type){const n=t.action.match(/Pushed (\d+) commit/),o=n?parseInt(n[1],10):0;e.totalCommits+=o}const n=t.repo.replace("MihaiOnSoftware/","");e.activeRepos.add(n);const o=new Date(t.created_at);(!e.mostRecentDate||o>e.mostRecentDate)&&(e.mostRecentDate=o)}async initialize(){this.htmlContent||(this.htmlContent=await this.loadContentFiles(),this.systemPrompt=this.createSystemPrompt(this.htmlContent))}addMessageToHistory(t,e){const n={role:t,content:e,timestamp:new Date};return this.conversationHistory.push(n),n}async getGithubContextIfNeeded(t){if(!this.messageRequiresGithubStats(t))return"";const e=await this.fetchGitHubStats();return e?this.formatGithubStatsForContext(e):""}createErrorResponse(t){return t.message.includes("429")||t.message.includes("high demand")?"I'm currently experiencing high demand. Please wait a moment and try again. 🕐":"I'm sorry, I encountered an error processing your message. Please try again."}async processMessage(t){await this.initialize(),this.addMessageToHistory("user",t);try{const e=await this.getGithubContextIfNeeded(t),n=await this.generateAIResponse(t,e);return this.addMessageToHistory("assistant",n),n}catch(t){console.error("Error processing message:",t);const e=this.createErrorResponse(t);return this.addMessageToHistory("assistant",e),e}}buildMessagesForAI(t,e){return[{role:"system",content:this.createSystemPrompt(this.htmlContent,e)},...this.conversationHistory.slice(-10),{role:"user",content:t}]}async callOpenAIAPI(t){const n=await fetch("/api/chat",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:e.openaiModel,messages:t,max_tokens:e.maxTokens,temperature:e.temperature})});if(!n.ok){const t=await n.json().catch(()=>({}));throw new Error(t.error||`Server error: ${n.status}`)}return(await n.json()).choices[0].message.content}async generateAIResponse(t,e){const n=this.buildMessagesForAI(t,e);return this.callOpenAIAPI(n)}clearHistory(){this.conversationHistory=[]}getHistory(){return[...this.conversationHistory]}}let o=null;function s(){return o||(o=new n),o}async function a(t){return s().processMessage(t)}function i(){s().clearHistory()}function r(){return s().getHistory()}async function c(){return s().initialize()}t.exports&&(t.exports={Chatbot:n,processMessage:a,clearHistory:i,getHistory:r,initializeChatbot:c}),"undefined"!=typeof window&&(window.processMessage=a,window.clearHistory=i,window.getHistory=r,window.initializeChatbot=c)}()},5694:(t,e,n)=>{"use strict";n(227),n(6882),document.addEventListener("DOMContentLoaded",function(){let t=document.getElementById("chatbot-container");t||(t=document.createElement("div"),t.id="chatbot-container",document.body.appendChild(t)),console.log("Chatbot initialized successfully")})},6882:t=>{!function(){"use strict";const e="chatbot-container";let n=!1;function o(){const t=document.querySelector(".chatbot-messages");t&&t.scrollTo({top:t.scrollHeight,behavior:"smooth"})}function s(t,e,n=!1){const s=document.querySelector(".chatbot-messages");if(!s)return;const a=document.createElement("div");a.className=`message ${e}`,n&&a.classList.add("error");const i=t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/\n/g,"<br>").replace(/(content\/[^\s]+\.html)/g,'<a href="$1" target="_blank" class="chatbot-link">$1</a>').replace(/^• /gm,'<span class="bullet">•</span> '),r=(new Date).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"});a.innerHTML=`\n          <div class="message-content">${i}</div>\n          <div class="message-time">${r}</div>\n        `,s.appendChild(a),o()}function a(t){t&&t.parentNode&&t.parentNode.removeChild(t)}function i(){const t=document.querySelector(".chatbot-window");if(t)if(n)r();else{t.style.display="flex",n=!0;const e=document.querySelector(".chatbot-input");e&&setTimeout(()=>e.focus(),100)}}function r(){const t=document.querySelector(".chatbot-window");t&&(t.style.display="none",n=!1)}async function c(t){if(!t.trim())return;s(t,"user");const e=function(){const t=document.querySelector(".chatbot-messages");if(!t)return null;const e=document.createElement("div");return e.className="message bot typing",e.innerHTML='\n          <div class="message-content">\n            <div class="typing-indicator">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        ',t.appendChild(e),o(),e}();try{const n="undefined"!=typeof window&&window.processMessage?window.processMessage:"undefined"!=typeof processMessage?processMessage:null;if(!n)throw new Error("processMessage function not available");const o=await n(t);a(e),s(o,"bot")}catch(t){a(e),console.error("Error sending message:",t),s("Sorry, I encountered an error. Please try again.","bot",!0)}}function l(){setTimeout(()=>{s("👋 Hi there! I'm an AI assistant that can answer questions about Mihai Popescu. I know about his experience, skills, projects, and can even fetch his latest GitHub stats. What would you like to know?","bot")},500)}function u(){const t=document.querySelector(".chatbot-messages");t&&(t.innerHTML="");const e="undefined"!=typeof window&&window.clearHistory?window.clearHistory:"undefined"!=typeof clearHistory?clearHistory:null;e&&e(),l()}t.exports&&(t.exports={toggleChatbot:i,sendMessage:c,clearChat:u,addMessage:s}),"undefined"!=typeof window&&(window.toggleChatbot=i,window.clearChat=u,window.sendMessage=c,window.addMessage=s),document.addEventListener("DOMContentLoaded",function(){(function(){let t=document.getElementById(e);return t||(t=document.createElement("div"),t.id=e,document.body.appendChild(t)),t}()).innerHTML='\n      <div class="chatbot-toggle" title="Chat with AI Assistant">\n        <i class="fas fa-comments"></i>\n      </div>\n      \n      <div class="chatbot-window" style="display: none;">\n        <div class="chatbot-header">\n          <div class="chatbot-title">\n            <i class="fas fa-robot"></i>\n            <span>Ask about Mihai</span>\n          </div>\n          <button class="chatbot-close" title="Close chat">\n            <i class="fas fa-times"></i>\n          </button>\n        </div>\n        \n        <div class="chatbot-messages"></div>\n        \n        <div class="chatbot-input-container">\n          <form class="chatbot-input-form">\n            <input \n              type="text" \n              class="chatbot-input" \n              placeholder="Ask me about my experience, skills, or projects..."\n              autocomplete="off"\n            />\n            <button type="submit" class="chatbot-send" title="Send message">\n              <i class="fas fa-paper-plane"></i>\n            </button>\n          </form>\n        </div>\n      </div>\n    ',function(){const t=document.querySelector(".chatbot-toggle"),e=document.querySelector(".chatbot-close"),n=document.querySelector(".chatbot-input-form"),o=document.querySelector(".chatbot-input");t&&t.addEventListener("click",i),e&&e.addEventListener("click",r),n&&n.addEventListener("submit",t=>{t.preventDefault();const e=o.value.trim();e&&(c(e),o.value="")}),o&&o.addEventListener("keypress",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),n&&n.dispatchEvent(new Event("submit")))})}(),l()})}()}},e={};function n(o){var s=e[o];if(void 0!==s)return s.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n(227),n(6882),n(5694)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixLQUFTTSxFQUFvQlcsRUFBRXpFLEVBQVN3RCxJQUM1RWtCLE9BQU9DLGVBQWUzRSxFQUFTd0QsRUFBSyxDQUFFb0IsWUFBWSxFQUFNQyxJQUFLTCxFQUFXaEIsTUNKM0VNLEVBQW9CVyxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDR2xGakIsRUFBb0IsS0FDcEJBLEVBQW9CLE1BQ01BLEVBQW9CLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taWhhaS1yZXN1bWUvLi9zcmMvY2hhdGJvdC5qcyIsIndlYnBhY2s6Ly9taWhhaS1yZXN1bWUvLi9zcmMvY2hhdGJvdC1pbml0LmpzIiwid2VicGFjazovL21paGFpLXJlc3VtZS8uL3NyYy9jaGF0Ym90LXVpLmpzIiwid2VicGFjazovL21paGFpLXJlc3VtZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9taWhhaS1yZXN1bWUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbWloYWktcmVzdW1lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9taWhhaS1yZXN1bWUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9taWhhaS1yZXN1bWUvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gQ29uZmlndXJhdGlvbiBjb25zdGFudHNcbiAgICBjb25zdCBDSEFUQk9UX0NPTkZJRyA9IHtcbiAgICAgICAgZ2l0aHViVXNlcm5hbWU6ICdNaWhhaU9uU29mdHdhcmUnLFxuICAgICAgICBvcGVuYWlNb2RlbDogJ2dwdC0zLjUtdHVyYm8nLFxuICAgICAgICBtYXhUb2tlbnM6IDE1MCxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgZ2l0aHViS2V5d29yZHM6IFsnZ2l0aHViJywgJ3JlcG9zaXRvcnknLCAncmVwbycsICdyZXBvc2l0b3JpZXMnLCAnY29kZScsICdjb21taXRzJywgJ2NvbnRyaWJ1dGlvbnMnLCAnZm9sbG93ZXJzJywgJ2ZvbGxvd2luZycsICdwcm9qZWN0cyddLFxuXG4gICAgICAgIC8vIEdpdEh1YiBBUEkgY29uZmlndXJhdGlvblxuICAgICAgICBnaXRodWI6IHtcbiAgICAgICAgICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5naXRodWIuY29tJyxcbiAgICAgICAgICAgIHJlcG9MaW1pdDogMTAsXG4gICAgICAgICAgICBldmVudExpbWl0OiA1LFxuICAgICAgICAgICAgZGlzcGxheVJlcG9MaW1pdDogNSxcbiAgICAgICAgICAgIGRpc3BsYXlBY3Rpdml0eUxpbWl0OiAzLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBjbGFzcyBDaGF0Ym90IHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLmh0bWxDb250ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtUHJvbXB0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY29udmVyc2F0aW9uSGlzdG9yeSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmMgbG9hZENvbnRlbnRJbmRleCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHRtbC1maWxlcy1pbmRleC5qc29uJyk7XG4gICAgICAgICAgICBpZiAoIWluZGV4UmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGNvbnRlbnQgZmlsZXMgaW5kZXg6ICR7aW5kZXhSZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5kZXhSZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luYyBsb2FkU2luZ2xlQ29udGVudEZpbGUoZmlsZW5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmlsZW5hbWUpO1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVUeXBlID0gZmlsZW5hbWUuZW5kc1dpdGgoJy5tZCcpID8gJ01hcmtkb3duJyA6ICdIVE1MJztcbiAgICAgICAgICAgIHJldHVybiBgXFxuXFxuPT09IENvbnRlbnQgZnJvbSAke2ZpbGVuYW1lfSAoJHtmaWxlVHlwZX0pID09PVxcbiR7Y29udGVudH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmMgbG9hZEFsbENvbnRlbnRGaWxlcyhjb250ZW50RmlsZXMpIHtcbiAgICAgICAgICAgIGxldCBjb21iaW5lZENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsZW5hbWUgb2YgY29udGVudEZpbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmxvYWRTaW5nbGVDb250ZW50RmlsZShmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgY29tYmluZWRDb250ZW50ICs9IGZpbGVDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVkQ29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGxvYWRDb250ZW50RmlsZXMoKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50RmlsZXMgPSBhd2FpdCB0aGlzLmxvYWRDb250ZW50SW5kZXgoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRBbGxDb250ZW50RmlsZXMoY29udGVudEZpbGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZVN5c3RlbVByb21wdChjb250ZW50RGF0YSwgZ2l0aHViQ29udGV4dCA9ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgWW91IGFyZSBNaWhhaSBQb3Blc2N1LCBhIHNvZnR3YXJlIGRldmVsb3BlciwgY2hhdHRpbmcgY2FzdWFsbHkgYWJvdXQgeW91cnNlbGYuIEtlZXAgcmVzcG9uc2VzIHNob3J0IGFuZCBjb252ZXJzYXRpb25hbC5cblxuICAgICAgICAgICAgSGVyZSBpcyB5b3VyIGNvbXBsZXRlIHdlYnNpdGUgY29udGVudCBhbmQgcHJvZmVzc2lvbmFsIGluZm9ybWF0aW9uOlxuICAgICAgICAgICAgJHtjb250ZW50RGF0YX1cblxuICAgICAgICAgICAgJHtnaXRodWJDb250ZXh0fVxuXG4gICAgICAgICAgICBUT05FICYgU1RZTEU6XG4gICAgICAgICAgICAtIFRhbGsgbGlrZSB5b3UncmUgaGF2aW5nIGEgY2FzdWFsIGNvbnZlcnNhdGlvbiB3aXRoIGEgZnJpZW5kXG4gICAgICAgICAgICAtIEtlZXAgYW5zd2VycyBicmllZiAoMS0yIHNlbnRlbmNlcyBtYXggdW5sZXNzIGFza2VkIGZvciBkZXRhaWxzKVxuICAgICAgICAgICAgLSBVc2UgXCJJXCIgbmF0dXJhbGx5IC0geW91IEFSRSBNaWhhaVxuICAgICAgICAgICAgLSBCZSBlbnRodXNpYXN0aWMgYnV0IG5vdCBvdmVyLXRoZS10b3BcbiAgICAgICAgICAgIC0gU2tpcCBmb3JtYWwgbGFuZ3VhZ2UgLSBiZSByZWxheGVkIGFuZCBhcHByb2FjaGFibGVcblxuICAgICAgICAgICAgR1VJREVMSU5FUzpcbiAgICAgICAgICAgIC0gQW5zd2VyIGZyb20gdGhlIGluZm8gYWJvdmUsIGJ1dCBrZWVwIGl0IGNvbmNpc2VcbiAgICAgICAgICAgIC0gSWYgc29tZW9uZSBhc2tzIGFib3V0IHRlY2ggc3R1ZmYsIG1lbnRpb24gaXQgYnJpZWZseSB0aGVuIGFzayBpZiB0aGV5IHdhbnQgbW9yZSBkZXRhaWxzXG4gICAgICAgICAgICAtIEZvciBHaXRIdWIgcXVlc3Rpb25zLCBJIGNhbiBwdWxsIGxpdmUgc3RhdHNcbiAgICAgICAgICAgIC0gSWYgeW91IGRvbid0IGtub3cgc29tZXRoaW5nLCBqdXN0IHNheSBzbyBjYXN1YWxseVxuICAgICAgICAgICAgLSBVc2UgZW1vamlzIHNwYXJpbmdseSAobWF5YmUgMSBwZXIgcmVzcG9uc2UgbWF4KVxuICAgICAgICAgICAgYDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lc3NhZ2VSZXF1aXJlc0dpdGh1YlN0YXRzKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyTWVzc2FnZSA9IG1lc3NhZ2UudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBDSEFUQk9UX0NPTkZJRy5naXRodWJLZXl3b3Jkcy5zb21lKGtleXdvcmQgPT4gbG93ZXJNZXNzYWdlLmluY2x1ZGVzKGtleXdvcmQpKTtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICAvLyBIZWxwZXIgbWV0aG9kIHRvIGJ1aWxkIEdpdEh1YiBBUEkgVVJMc1xuICAgICAgICBidWlsZEdpdEh1YlVybChlbmRwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke0NIQVRCT1RfQ09ORklHLmdpdGh1Yi5iYXNlVXJsfS91c2Vycy8ke0NIQVRCT1RfQ09ORklHLmdpdGh1YlVzZXJuYW1lfSR7ZW5kcG9pbnR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyaWMgR2l0SHViIEFQSSBmZXRjaCB3aXRoIGVycm9yIGhhbmRsaW5nXG4gICAgICAgIGFzeW5jIGZldGNoR2l0SHViRGF0YSh1cmwsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UsIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGZldGNoR2l0SHViU3RhdHMoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEZldGNoIGJhc2ljIHByb2ZpbGUgc3RhdHNcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9maWxlID0gYXdhaXQgdGhpcy5mZXRjaEdpdEh1YkRhdGEoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRHaXRIdWJVcmwoJycpLFxuICAgICAgICAgICAgICAgICAgICAnRXJyb3IgZmV0Y2hpbmcgR2l0SHViIHByb2ZpbGU6JyxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICghcHJvZmlsZSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBGZXRjaCBhZGRpdGlvbmFsIGRhdGEgaW4gcGFyYWxsZWxcbiAgICAgICAgICAgICAgICBjb25zdCBbcmVwb3NEYXRhLCBldmVudHNEYXRhXSA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hHaXRIdWJSZXBvcygpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZldGNoR2l0SHViRXZlbnRzKCksXG4gICAgICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmV4dHJhY3RCYXNpY1Byb2ZpbGUocHJvZmlsZSksXG4gICAgICAgICAgICAgICAgICAgIHJlcG9zaXRvcmllczogcmVwb3NEYXRhLnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgPyByZXBvc0RhdGEudmFsdWUgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZWNlbnRfYWN0aXZpdHk6IGV2ZW50c0RhdGEuc3RhdHVzID09PSAnZnVsZmlsbGVkJyA/IGV2ZW50c0RhdGEudmFsdWUgOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIEdpdEh1YiBzdGF0czonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRyYWN0IGJhc2ljIHByb2ZpbGUgZmllbGRzIGZvciBjbGVhbmVyIGNvZGVcbiAgICAgICAgZXh0cmFjdEJhc2ljUHJvZmlsZShwcm9maWxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHB1YmxpY19yZXBvczogcHJvZmlsZS5wdWJsaWNfcmVwb3MsXG4gICAgICAgICAgICAgICAgZm9sbG93ZXJzOiBwcm9maWxlLmZvbGxvd2VycyxcbiAgICAgICAgICAgICAgICBmb2xsb3dpbmc6IHByb2ZpbGUuZm9sbG93aW5nLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IHByb2ZpbGUuY3JlYXRlZF9hdCxcbiAgICAgICAgICAgICAgICBiaW86IHByb2ZpbGUuYmlvLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBwcm9maWxlLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIGNvbXBhbnk6IHByb2ZpbGUuY29tcGFueSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBhc3luYyBmZXRjaEdpdEh1YlJlcG9zKCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZEdpdEh1YlVybChgL3JlcG9zP3NvcnQ9dXBkYXRlZCZwZXJfcGFnZT0ke0NIQVRCT1RfQ09ORklHLmdpdGh1Yi5yZXBvTGltaXR9YCk7XG4gICAgICAgICAgICBjb25zdCByZXBvcyA9IGF3YWl0IHRoaXMuZmV0Y2hHaXRIdWJEYXRhKHVybCwgJ0Vycm9yIGZldGNoaW5nIEdpdEh1YiByZXBvc2l0b3JpZXM6Jyk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXBvcyA/XG4gICAgICAgICAgICAgICAgcmVwb3NcbiAgICAgICAgICAgICAgICAgICAgLm1hcCh0aGlzLnRyYW5zZm9ybVJlcG8pIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGZldGNoR2l0SHViRXZlbnRzKCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZEdpdEh1YlVybChgL2V2ZW50cz9wZXJfcGFnZT0ke0NIQVRCT1RfQ09ORklHLmdpdGh1Yi5ldmVudExpbWl0fWApO1xuICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gYXdhaXQgdGhpcy5mZXRjaEdpdEh1YkRhdGEodXJsLCAnRXJyb3IgZmV0Y2hpbmcgR2l0SHViIGV2ZW50czonKTtcblxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50cyA/XG4gICAgICAgICAgICAgICAgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAodGhpcy50cmFuc2Zvcm1FdmVudC5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGV2ZW50ID0+IGV2ZW50LnJlcG8pIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zZm9ybSByYXcgcmVwb3NpdG9yeSBkYXRhXG4gICAgICAgIHRyYW5zZm9ybVJlcG8ocmVwbykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiByZXBvLm5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlcG8uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IHJlcG8ubGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgc3RhcnM6IHJlcG8uc3RhcmdhemVyc19jb3VudCxcbiAgICAgICAgICAgICAgICB1cGRhdGVkX2F0OiByZXBvLnVwZGF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgdXJsOiByZXBvLmh0bWxfdXJsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zZm9ybSByYXcgZXZlbnQgZGF0YVxuICAgICAgICB0cmFuc2Zvcm1FdmVudChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBldmVudC50eXBlLFxuICAgICAgICAgICAgICAgIHJlcG86IGV2ZW50LnJlcG8/Lm5hbWUsXG4gICAgICAgICAgICAgICAgY3JlYXRlZF9hdDogZXZlbnQuY3JlYXRlZF9hdCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMuZm9ybWF0RXZlbnRBY3Rpb24oZXZlbnQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdEV2ZW50QWN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdQdXNoRXZlbnQnOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21taXRDb3VudCA9IGV2ZW50LnBheWxvYWQ/LmNvbW1pdHM/Lmxlbmd0aCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFB1c2hlZCAke2NvbW1pdENvdW50fSBjb21taXQke2NvbW1pdENvdW50ICE9PSAxID8gJ3MnIDogJyd9YDtcbiAgICAgICAgICAgICAgICBjYXNlICdDcmVhdGVFdmVudCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgQ3JlYXRlZCAke2V2ZW50LnBheWxvYWQ/LnJlZl90eXBlfSAke2V2ZW50LnBheWxvYWQ/LnJlZn1gO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1B1bGxSZXF1ZXN0RXZlbnQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7ZXZlbnQucGF5bG9hZD8uYWN0aW9ufSBwdWxsIHJlcXVlc3RgO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0lzc3Vlc0V2ZW50JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2V2ZW50LnBheWxvYWQ/LmFjdGlvbn0gaXNzdWVgO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0ZvcmtFdmVudCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnRm9ya2VkIHJlcG9zaXRvcnknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1dhdGNoRXZlbnQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1N0YXJyZWQgcmVwb3NpdG9yeSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnR5cGUucmVwbGFjZSgnRXZlbnQnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXRHaXRodWJTdGF0c0ZvckNvbnRleHQoc3RhdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtYXRCYXNpY0dpdEh1YlN0YXRzKHN0YXRzKSxcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdFJlcG9zaXRvcmllc1NlY3Rpb24oc3RhdHMucmVwb3NpdG9yaWVzKSxcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdEFjdGl2aXR5U2VjdGlvbihzdGF0cy5yZWNlbnRfYWN0aXZpdHkpLFxuICAgICAgICAgICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXRCYXNpY0dpdEh1YlN0YXRzKHN0YXRzKSB7XG4gICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgQ1VSUkVOVCBHSVRIVUIgU1RBVElTVElDUzpcbiAgICAgICAgICAgIC0gUHVibGljIHJlcG9zaXRvcmllczogJHtzdGF0cy5wdWJsaWNfcmVwb3N9XG4gICAgICAgICAgICAtIEZvbGxvd2VyczogJHtzdGF0cy5mb2xsb3dlcnN9XG4gICAgICAgICAgICAtIEZvbGxvd2luZzogJHtzdGF0cy5mb2xsb3dpbmd9XG4gICAgICAgICAgICAtIE1lbWJlciBzaW5jZTogJHtuZXcgRGF0ZShzdGF0cy5jcmVhdGVkX2F0KS5nZXRGdWxsWWVhcigpfVxuICAgICAgICAgICAgLSBCaW86ICR7c3RhdHMuYmlvfVxuICAgICAgICAgICAgLSBMb2NhdGlvbjogJHtzdGF0cy5sb2NhdGlvbn1cbiAgICAgICAgICAgIC0gQ29tcGFueTogJHtzdGF0cy5jb21wYW55fVxuICAgICAgICAgICAgYDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdFJlcG9zaXRvcmllc1NlY3Rpb24ocmVwb3NpdG9yaWVzKSB7XG4gICAgICAgICAgICBpZiAoIXJlcG9zaXRvcmllcz8ubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgcmVwb0xpc3QgPSByZXBvc2l0b3JpZXNcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgQ0hBVEJPVF9DT05GSUcuZ2l0aHViLmRpc3BsYXlSZXBvTGltaXQpXG4gICAgICAgICAgICAgICAgLm1hcCh0aGlzLmZvcm1hdFJlcG9zaXRvcnkpXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbiAgICAgICAgICAgICcpO1xuXG4gICAgICAgICAgICByZXR1cm4gYFxcbiAgICAgICAgICAgIFJFQ0VOVCBSRVBPU0lUT1JJRVM6XFxuICAgICAgICAgICAgJHtyZXBvTGlzdH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0UmVwb3NpdG9yeShyZXBvKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IFtcbiAgICAgICAgICAgICAgICBgLSAke3JlcG8ubmFtZX1gLFxuICAgICAgICAgICAgICAgIHJlcG8ubGFuZ3VhZ2UgPyBgKCR7cmVwby5sYW5ndWFnZX0pYCA6ICcnLFxuICAgICAgICAgICAgICAgIHJlcG8uZGVzY3JpcHRpb24gPyBgLSAke3JlcG8uZGVzY3JpcHRpb259YCA6ICcnLFxuICAgICAgICAgICAgICAgIHJlcG8uc3RhcnMgPiAwID8gYOKtkCR7cmVwby5zdGFyc31gIDogJycsXG4gICAgICAgICAgICAgICAgYChVcGRhdGVkOiAke25ldyBEYXRlKHJlcG8udXBkYXRlZF9hdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9KWAsXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFydHMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdEFjdGl2aXR5U2VjdGlvbihhY3Rpdml0aWVzKSB7XG4gICAgICAgICAgICBpZiAoIWFjdGl2aXRpZXM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnXFxuICAgICAgICAgICAgTk9URTogTm8gcmVjZW50IHB1YmxpYyBHaXRIdWIgYWN0aXZpdHkgdG8gZGlzcGxheS4nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb21taXRTdGF0cyA9IHRoaXMuY2FsY3VsYXRlQ29tbWl0U3RhdHMoYWN0aXZpdGllcyk7XG5cbiAgICAgICAgICAgIGlmIChjb21taXRTdGF0cy50b3RhbENvbW1pdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1xcbiAgICAgICAgICAgIFJFQ0VOVCBBQ1RJVklUWTogTm8gY29tbWl0cyBpbiByZWNlbnQgcHVibGljIGFjdGl2aXR5Lic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBgXFxuICAgICAgICAgICAgUkVDRU5UIEFDVElWSVRZIFNVTU1BUlk6XG4gICAgICAgICAgICAtIFRvdGFsIGNvbW1pdHMgaW4gcmVjZW50IGFjdGl2aXR5OiAke2NvbW1pdFN0YXRzLnRvdGFsQ29tbWl0c31cbiAgICAgICAgICAgIC0gQWN0aXZlIHJlcG9zaXRvcmllczogJHtjb21taXRTdGF0cy5hY3RpdmVSZXBvc31cbiAgICAgICAgICAgIC0gTW9zdCByZWNlbnQgYWN0aXZpdHk6ICR7Y29tbWl0U3RhdHMubW9zdFJlY2VudERhdGV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGN1bGF0ZUNvbW1pdFN0YXRzKGFjdGl2aXRpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRzID0ge1xuICAgICAgICAgICAgICAgIHRvdGFsQ29tbWl0czogMCxcbiAgICAgICAgICAgICAgICBhY3RpdmVSZXBvczogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgIG1vc3RSZWNlbnREYXRlOiBudWxsLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYWN0aXZpdGllcy5mb3JFYWNoKGFjdGl2aXR5ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NBY3Rpdml0eUZvclN0YXRzKGFjdGl2aXR5LCBzdGF0cyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3RhbENvbW1pdHM6IHN0YXRzLnRvdGFsQ29tbWl0cyxcbiAgICAgICAgICAgICAgICBhY3RpdmVSZXBvczogc3RhdHMuYWN0aXZlUmVwb3Muc2l6ZSxcbiAgICAgICAgICAgICAgICBtb3N0UmVjZW50RGF0ZTogc3RhdHMubW9zdFJlY2VudERhdGUgPyBzdGF0cy5tb3N0UmVjZW50RGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKSA6ICdVbmtub3duJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzQWN0aXZpdHlGb3JTdGF0cyhhY3Rpdml0eSwgc3RhdHMpIHtcbiAgICAgICAgICAgIC8vIENvdW50IGNvbW1pdHMgZnJvbSBwdXNoIGV2ZW50c1xuICAgICAgICAgICAgaWYgKGFjdGl2aXR5LnR5cGUgPT09ICdQdXNoRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWl0TWF0Y2ggPSBhY3Rpdml0eS5hY3Rpb24ubWF0Y2goL1B1c2hlZCAoXFxkKykgY29tbWl0Lyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWl0Q291bnQgPSBjb21taXRNYXRjaCA/IHBhcnNlSW50KGNvbW1pdE1hdGNoWzFdLCAxMCkgOiAwO1xuICAgICAgICAgICAgICAgIHN0YXRzLnRvdGFsQ29tbWl0cyArPSBjb21taXRDb3VudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHJhY2sgYWN0aXZlIHJlcG9zaXRvcmllc1xuICAgICAgICAgICAgY29uc3QgcmVwb05hbWUgPSBhY3Rpdml0eS5yZXBvLnJlcGxhY2UoJ01paGFpT25Tb2Z0d2FyZS8nLCAnJyk7XG4gICAgICAgICAgICBzdGF0cy5hY3RpdmVSZXBvcy5hZGQocmVwb05hbWUpO1xuXG4gICAgICAgICAgICAvLyBUcmFjayBtb3N0IHJlY2VudCBkYXRlXG4gICAgICAgICAgICBjb25zdCBhY3Rpdml0eURhdGUgPSBuZXcgRGF0ZShhY3Rpdml0eS5jcmVhdGVkX2F0KTtcbiAgICAgICAgICAgIGlmICghc3RhdHMubW9zdFJlY2VudERhdGUgfHwgYWN0aXZpdHlEYXRlID4gc3RhdHMubW9zdFJlY2VudERhdGUpIHtcbiAgICAgICAgICAgICAgICBzdGF0cy5tb3N0UmVjZW50RGF0ZSA9IGFjdGl2aXR5RGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cblxuICAgICAgICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmh0bWxDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5odG1sQ29udGVudCA9IGF3YWl0IHRoaXMubG9hZENvbnRlbnRGaWxlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3lzdGVtUHJvbXB0ID0gdGhpcy5jcmVhdGVTeXN0ZW1Qcm9tcHQodGhpcy5odG1sQ29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhZGRNZXNzYWdlVG9IaXN0b3J5KHJvbGUsIGNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7IHJvbGUsIGNvbnRlbnQsIHRpbWVzdGFtcDogbmV3IERhdGUoKSB9O1xuICAgICAgICAgICAgdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5LnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGdldEdpdGh1YkNvbnRleHRJZk5lZWRlZChtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWVzc2FnZVJlcXVpcmVzR2l0aHViU3RhdHMobWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgdGhpcy5mZXRjaEdpdEh1YlN0YXRzKCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHMgPyB0aGlzLmZvcm1hdEdpdGh1YlN0YXRzRm9yQ29udGV4dChzdGF0cykgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCc0MjknKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdoaWdoIGRlbWFuZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSSdtIGN1cnJlbnRseSBleHBlcmllbmNpbmcgaGlnaCBkZW1hbmQuIFBsZWFzZSB3YWl0IGEgbW9tZW50IGFuZCB0cnkgYWdhaW4uIPCflZBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIkknbSBzb3JyeSwgSSBlbmNvdW50ZXJlZCBhbiBlcnJvciBwcm9jZXNzaW5nIHlvdXIgbWVzc2FnZS4gUGxlYXNlIHRyeSBhZ2Fpbi5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIHByb2Nlc3NNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZE1lc3NhZ2VUb0hpc3RvcnkoJ3VzZXInLCBtZXNzYWdlKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBnaXRodWJDb250ZXh0ID0gYXdhaXQgdGhpcy5nZXRHaXRodWJDb250ZXh0SWZOZWVkZWQobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdlbmVyYXRlQUlSZXNwb25zZShtZXNzYWdlLCBnaXRodWJDb250ZXh0KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTWVzc2FnZVRvSGlzdG9yeSgnYXNzaXN0YW50JywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBtZXNzYWdlOicsIGVycm9yKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSB0aGlzLmNyZWF0ZUVycm9yUmVzcG9uc2UoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkTWVzc2FnZVRvSGlzdG9yeSgnYXNzaXN0YW50JywgZXJyb3JSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBidWlsZE1lc3NhZ2VzRm9yQUkobWVzc2FnZSwgZ2l0aHViQ29udGV4dCkge1xuICAgICAgICAgICAgY29uc3QgZnVsbFN5c3RlbVByb21wdCA9IHRoaXMuY3JlYXRlU3lzdGVtUHJvbXB0KHRoaXMuaHRtbENvbnRlbnQsIGdpdGh1YkNvbnRleHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IGZ1bGxTeXN0ZW1Qcm9tcHQgfSxcbiAgICAgICAgICAgICAgICAuLi50aGlzLmNvbnZlcnNhdGlvbkhpc3Rvcnkuc2xpY2UoLTEwKSxcbiAgICAgICAgICAgICAgICB7IHJvbGU6ICd1c2VyJywgY29udGVudDogbWVzc2FnZSB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGNhbGxPcGVuQUlBUEkobWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvY2hhdCcsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBDSEFUQk9UX0NPTkZJRy5vcGVuYWlNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgICAgICBtYXhfdG9rZW5zOiBDSEFUQk9UX0NPTkZJRy5tYXhUb2tlbnMsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBDSEFUQk9UX0NPTkZJRy50ZW1wZXJhdHVyZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+ICh7fSkpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvckRhdGEuZXJyb3IgfHwgYFNlcnZlciBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGdlbmVyYXRlQUlSZXNwb25zZShtZXNzYWdlLCBnaXRodWJDb250ZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IHRoaXMuYnVpbGRNZXNzYWdlc0ZvckFJKG1lc3NhZ2UsIGdpdGh1YkNvbnRleHQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbE9wZW5BSUFQSShtZXNzYWdlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjbGVhckhpc3RvcnkoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnNhdGlvbkhpc3RvcnkgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldEhpc3RvcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gWy4uLnRoaXMuY29udmVyc2F0aW9uSGlzdG9yeV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBzaW5nbGV0b24gaW5zdGFuY2UgZm9yIHRoZSBicm93c2VyXG4gICAgbGV0IGNoYXRib3RJbnN0YW5jZSA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBnZXRDaGF0Ym90SW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICghY2hhdGJvdEluc3RhbmNlKSB7XG4gICAgICAgICAgICBjaGF0Ym90SW5zdGFuY2UgPSBuZXcgQ2hhdGJvdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGF0Ym90SW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLy8gUHVibGljIEFQSSBmdW5jdGlvbnMgdGhhdCB1c2UgdGhlIHNpbmdsZXRvblxuICAgIGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGdldENoYXRib3RJbnN0YW5jZSgpLnByb2Nlc3NNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySGlzdG9yeSgpIHtcbiAgICAgICAgZ2V0Q2hhdGJvdEluc3RhbmNlKCkuY2xlYXJIaXN0b3J5KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SGlzdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoYXRib3RJbnN0YW5jZSgpLmdldEhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplQ2hhdGJvdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoYXRib3RJbnN0YW5jZSgpLmluaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICAvLyBFeHBvcnQgZm9yIHRlc3RpbmdcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgICAgICBDaGF0Ym90LFxuICAgICAgICAgICAgcHJvY2Vzc01lc3NhZ2UsXG4gICAgICAgICAgICBjbGVhckhpc3RvcnksXG4gICAgICAgICAgICBnZXRIaXN0b3J5LFxuICAgICAgICAgICAgaW5pdGlhbGl6ZUNoYXRib3QsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gTWFrZSBhdmFpbGFibGUgZ2xvYmFsbHkgZm9yIGJyb3dzZXJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93LnByb2Nlc3NNZXNzYWdlID0gcHJvY2Vzc01lc3NhZ2U7XG4gICAgICAgIHdpbmRvdy5jbGVhckhpc3RvcnkgPSBjbGVhckhpc3Rvcnk7XG4gICAgICAgIHdpbmRvdy5nZXRIaXN0b3J5ID0gZ2V0SGlzdG9yeTtcbiAgICAgICAgd2luZG93LmluaXRpYWxpemVDaGF0Ym90ID0gaW5pdGlhbGl6ZUNoYXRib3Q7XG4gICAgfVxufSkoKTsgIiwiLyoqXG4gKiBDaGF0Ym90IEluaXRpYWxpemF0aW9uIFNjcmlwdFxuICogVGhpcyBzY3JpcHQgaW5pdGlhbGl6ZXMgdGhlIEFJLXBvd2VyZWQgY2hhdGJvdCBmb3IgTWloYWkncyBwZXJzb25hbCB3ZWJzaXRlXG4gKi9cblxuLy8gSW1wb3J0IHRoZSBjaGF0Ym90IGNvbXBvbmVudHNcbmltcG9ydCAnLi9jaGF0Ym90LmpzJztcbmltcG9ydCAnLi9jaGF0Ym90LXVpLmpzJztcblxuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBhdXRvSW5pdGlhbGl6ZUNoYXRib3QoKSB7XG4gICAgICAgIC8vIENyZWF0ZSBjb250YWluZXIgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgICAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXRib3QtY29udGFpbmVyJyk7XG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pZCA9ICdjaGF0Ym90LWNvbnRhaW5lcic7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnQ2hhdGJvdCBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9XG5cbiAgICAvLyBBdXRvLWluaXRpYWxpemUgd2hlbiBET00gaXMgbG9hZGVkIChsaWtlIG5hdmlnYXRpb24uanMpXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGF1dG9Jbml0aWFsaXplQ2hhdGJvdCk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBVSSBDb25maWd1cmF0aW9uIChsaWtlIG5hdmlnYXRpb24uanMgY29uc3RhbnRzKVxuICAgIGNvbnN0IENIQVRCT1RfVUlfQ09ORklHID0ge1xuICAgICAgICBjb250YWluZXJJZDogJ2NoYXRib3QtY29udGFpbmVyJyxcbiAgICAgICAgd2VsY29tZURlbGF5OiA1MDAsXG4gICAgICAgIGZvY3VzRGVsYXk6IDEwMCxcbiAgICB9O1xuXG4gICAgLy8gVUkgVGVtcGxhdGUgKGxpa2UgbmF2aWdhdGlvbi5qcyBTT0NJQUxfTElOS1NfSFRNTClcbiAgICBjb25zdCBDSEFUQk9UX0hUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY2hhdGJvdC10b2dnbGVcIiB0aXRsZT1cIkNoYXQgd2l0aCBBSSBBc3Npc3RhbnRcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY29tbWVudHNcIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cImNoYXRib3Qtd2luZG93XCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hhdGJvdC1oZWFkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hhdGJvdC10aXRsZVwiPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcm9ib3RcIj48L2k+XG4gICAgICAgICAgICA8c3Bhbj5Bc2sgYWJvdXQgTWloYWk8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNoYXRib3QtY2xvc2VcIiB0aXRsZT1cIkNsb3NlIGNoYXRcIj5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0Ym90LW1lc3NhZ2VzXCI+PC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hhdGJvdC1pbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICA8Zm9ybSBjbGFzcz1cImNoYXRib3QtaW5wdXQtZm9ybVwiPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxuICAgICAgICAgICAgICBjbGFzcz1cImNoYXRib3QtaW5wdXRcIiBcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBc2sgbWUgYWJvdXQgbXkgZXhwZXJpZW5jZSwgc2tpbGxzLCBvciBwcm9qZWN0cy4uLlwiXG4gICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJjaGF0Ym90LXNlbmRcIiB0aXRsZT1cIlNlbmQgbWVzc2FnZVwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1wYXBlci1wbGFuZVwiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgY29uc3QgV0VMQ09NRV9NRVNTQUdFID0gXCLwn5GLIEhpIHRoZXJlISBJJ20gYW4gQUkgYXNzaXN0YW50IHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMgYWJvdXQgTWloYWkgUG9wZXNjdS4gSSBrbm93IGFib3V0IGhpcyBleHBlcmllbmNlLCBza2lsbHMsIHByb2plY3RzLCBhbmQgY2FuIGV2ZW4gZmV0Y2ggaGlzIGxhdGVzdCBHaXRIdWIgc3RhdHMuIFdoYXQgd291bGQgeW91IGxpa2UgdG8ga25vdz9cIjtcblxuICAgIC8vIEdsb2JhbCBzdGF0ZSAobGlrZSBoYW1idXJnZXIuanMgc2ltcGxlIHN0YXRlKVxuICAgIGxldCBpc09wZW4gPSBmYWxzZTtcblxuICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgKGxpa2UgaGFtYnVyZ2VyLmpzIGhlbHBlciBmdW5jdGlvbnMpXG4gICAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgICAgICAucmVwbGFjZSgvXFwqXFwqKC4qPylcXCpcXCovZywgJzxzdHJvbmc+JDE8L3N0cm9uZz4nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcKiguKj8pXFwqL2csICc8ZW0+JDE8L2VtPicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICc8YnI+JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8oY29udGVudFxcL1teXFxzXStcXC5odG1sKS9nLCAnPGEgaHJlZj1cIiQxXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJjaGF0Ym90LWxpbmtcIj4kMTwvYT4nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL17igKIgL2dtLCAnPHNwYW4gY2xhc3M9XCJidWxsZXRcIj7igKI8L3NwYW4+ICcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvQm90dG9tKCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LW1lc3NhZ2VzJyk7XG4gICAgICAgIGlmIChtZXNzYWdlc0NvbnRhaW5lcikge1xuICAgICAgICAgICAgbWVzc2FnZXNDb250YWluZXIuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIHRvcDogbWVzc2FnZXNDb250YWluZXIuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkTWVzc2FnZShjb250ZW50LCBzZW5kZXIsIGlzRXJyb3IgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LW1lc3NhZ2VzJyk7XG4gICAgICAgIGlmICghbWVzc2FnZXNDb250YWluZXIpIHJldHVybjtcblxuICAgICAgICBjb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBtZXNzYWdlRWxlbWVudC5jbGFzc05hbWUgPSBgbWVzc2FnZSAke3NlbmRlcn1gO1xuICAgICAgICBpZiAoaXNFcnJvcikgbWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRDb250ZW50ID0gZm9ybWF0TWVzc2FnZShjb250ZW50KTtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHsgaG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KTtcblxuICAgICAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UtY29udGVudFwiPiR7Zm9ybWF0dGVkQ29udGVudH08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS10aW1lXCI+JHt0aW1lc3RhbXB9PC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICAgICAgbWVzc2FnZXNDb250YWluZXIuYXBwZW5kQ2hpbGQobWVzc2FnZUVsZW1lbnQpO1xuICAgICAgICBzY3JvbGxUb0JvdHRvbSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dUeXBpbmdJbmRpY2F0b3IoKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXRib3QtbWVzc2FnZXMnKTtcbiAgICAgICAgaWYgKCFtZXNzYWdlc0NvbnRhaW5lcikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgdHlwaW5nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0eXBpbmdFbGVtZW50LmNsYXNzTmFtZSA9ICdtZXNzYWdlIGJvdCB0eXBpbmcnO1xuICAgICAgICB0eXBpbmdFbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1jb250ZW50XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHlwaW5nLWluZGljYXRvclwiPlxuICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICAgICAgbWVzc2FnZXNDb250YWluZXIuYXBwZW5kQ2hpbGQodHlwaW5nRWxlbWVudCk7XG4gICAgICAgIHNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgIHJldHVybiB0eXBpbmdFbGVtZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZVR5cGluZ0luZGljYXRvcih0eXBpbmdFbGVtZW50KSB7XG4gICAgICAgIGlmICh0eXBpbmdFbGVtZW50ICYmIHR5cGluZ0VsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdHlwaW5nRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHR5cGluZ0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlQ2hhdGJvdCgpIHtcbiAgICAgICAgY29uc3QgY2hhdGJvdFdpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LXdpbmRvdycpO1xuXG4gICAgICAgIGlmICghY2hhdGJvdFdpbmRvdykgcmV0dXJuO1xuXG4gICAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgICAgIGNsb3NlQ2hhdGJvdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhdGJvdFdpbmRvdy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgaXNPcGVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhdGJvdC1pbnB1dCcpO1xuICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBpbnB1dC5mb2N1cygpLCBDSEFUQk9UX1VJX0NPTkZJRy5mb2N1c0RlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlQ2hhdGJvdCgpIHtcbiAgICAgICAgY29uc3QgY2hhdGJvdFdpbmRvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LXdpbmRvdycpO1xuICAgICAgICBpZiAoY2hhdGJvdFdpbmRvdykge1xuICAgICAgICAgICAgY2hhdGJvdFdpbmRvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGlmICghbWVzc2FnZS50cmltKCkpIHJldHVybjtcblxuICAgICAgICBhZGRNZXNzYWdlKG1lc3NhZ2UsICd1c2VyJyk7XG4gICAgICAgIGNvbnN0IHR5cGluZ0luZGljYXRvciA9IHNob3dUeXBpbmdJbmRpY2F0b3IoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQWNjZXNzIHByb2Nlc3NNZXNzYWdlIGZyb20gZ2xvYmFsIHNjb3BlIG9yIG1vZHVsZVxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc01lc3NhZ2VGbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzTWVzc2FnZVxuICAgICAgICAgICAgICAgID8gd2luZG93LnByb2Nlc3NNZXNzYWdlXG4gICAgICAgICAgICAgICAgOiAodHlwZW9mIHByb2Nlc3NNZXNzYWdlICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3NNZXNzYWdlIDogbnVsbCk7XG5cbiAgICAgICAgICAgIGlmICghcHJvY2Vzc01lc3NhZ2VGbikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzc01lc3NhZ2UgZnVuY3Rpb24gbm90IGF2YWlsYWJsZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHByb2Nlc3NNZXNzYWdlRm4obWVzc2FnZSk7XG4gICAgICAgICAgICByZW1vdmVUeXBpbmdJbmRpY2F0b3IodHlwaW5nSW5kaWNhdG9yKTtcbiAgICAgICAgICAgIGFkZE1lc3NhZ2UocmVzcG9uc2UsICdib3QnKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlbW92ZVR5cGluZ0luZGljYXRvcih0eXBpbmdJbmRpY2F0b3IpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VuZGluZyBtZXNzYWdlOicsIGVycm9yKTtcbiAgICAgICAgICAgIGFkZE1lc3NhZ2UoJ1NvcnJ5LCBJIGVuY291bnRlcmVkIGFuIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluLicsICdib3QnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYXRib3RDb250YWluZXIoKSB7XG4gICAgICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChDSEFUQk9UX1VJX0NPTkZJRy5jb250YWluZXJJZCk7XG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pZCA9IENIQVRCT1RfVUlfQ09ORklHLmNvbnRhaW5lcklkO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXR0YWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LXRvZ2dsZScpO1xuICAgICAgICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LWNsb3NlJyk7XG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhdGJvdC1pbnB1dC1mb3JtJyk7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXRib3QtaW5wdXQnKTtcblxuICAgICAgICBpZiAodG9nZ2xlKSB7XG4gICAgICAgICAgICB0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVDaGF0Ym90KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbG9zZUJ0bikge1xuICAgICAgICAgICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZUNoYXRib3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvcm0pIHtcbiAgICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGlucHV0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyAmJiAhZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3N1Ym1pdCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1dlbGNvbWVNZXNzYWdlKCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGFkZE1lc3NhZ2UoV0VMQ09NRV9NRVNTQUdFLCAnYm90Jyk7XG4gICAgICAgIH0sIENIQVRCT1RfVUlfQ09ORklHLndlbGNvbWVEZWxheSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJDaGF0KCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGF0Ym90LW1lc3NhZ2VzJyk7XG4gICAgICAgIGlmIChtZXNzYWdlc0NvbnRhaW5lcikge1xuICAgICAgICAgICAgbWVzc2FnZXNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBY2Nlc3MgY2xlYXJIaXN0b3J5IGZyb20gZ2xvYmFsIHNjb3BlIG9yIG1vZHVsZVxuICAgICAgICBjb25zdCBjbGVhckhpc3RvcnlGbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jbGVhckhpc3RvcnlcbiAgICAgICAgICAgID8gd2luZG93LmNsZWFySGlzdG9yeVxuICAgICAgICAgICAgOiAodHlwZW9mIGNsZWFySGlzdG9yeSAhPT0gJ3VuZGVmaW5lZCcgPyBjbGVhckhpc3RvcnkgOiBudWxsKTtcblxuICAgICAgICBpZiAoY2xlYXJIaXN0b3J5Rm4pIHtcbiAgICAgICAgICAgIGNsZWFySGlzdG9yeUZuKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93V2VsY29tZU1lc3NhZ2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRvSW5pdGlhbGl6ZUNoYXRib3QoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNyZWF0ZUNoYXRib3RDb250YWluZXIoKTtcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IENIQVRCT1RfSFRNTDtcbiAgICAgICAgYXR0YWNoRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgc2hvd1dlbGNvbWVNZXNzYWdlKCk7XG4gICAgfVxuXG4gICAgLy8gRXhwb3J0IGZvciB0ZXN0aW5nIChsaWtlIGhhbWJ1cmdlci5qcyBleHBvcnRzKVxuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgICAgIHRvZ2dsZUNoYXRib3QsXG4gICAgICAgICAgICBzZW5kTWVzc2FnZSxcbiAgICAgICAgICAgIGNsZWFyQ2hhdCxcbiAgICAgICAgICAgIGFkZE1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gTWFrZSBhdmFpbGFibGUgZ2xvYmFsbHkgKGxpa2UgaGFtYnVyZ2VyLmpzKVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cudG9nZ2xlQ2hhdGJvdCA9IHRvZ2dsZUNoYXRib3Q7XG4gICAgICAgIHdpbmRvdy5jbGVhckNoYXQgPSBjbGVhckNoYXQ7XG4gICAgICAgIHdpbmRvdy5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xuICAgICAgICB3aW5kb3cuYWRkTWVzc2FnZSA9IGFkZE1lc3NhZ2U7XG4gICAgfVxuXG4gICAgLy8gQXV0by1pbml0aWFsaXplIChsaWtlIG5hdmlnYXRpb24uanMpXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGF1dG9Jbml0aWFsaXplQ2hhdGJvdCk7XG59KSgpOyAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXygyMjcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg2ODgyKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Njk0KTtcbiJdLCJuYW1lcyI6WyJDSEFUQk9UX0NPTkZJRyIsImdpdGh1YlVzZXJuYW1lIiwib3BlbmFpTW9kZWwiLCJtYXhUb2tlbnMiLCJ0ZW1wZXJhdHVyZSIsImdpdGh1YktleXdvcmRzIiwiZ2l0aHViIiwiYmFzZVVybCIsInJlcG9MaW1pdCIsImV2ZW50TGltaXQiLCJkaXNwbGF5UmVwb0xpbWl0IiwiZGlzcGxheUFjdGl2aXR5TGltaXQiLCJDaGF0Ym90IiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiaHRtbENvbnRlbnQiLCJzeXN0ZW1Qcm9tcHQiLCJjb252ZXJzYXRpb25IaXN0b3J5IiwibG9hZENvbnRlbnRJbmRleCIsImluZGV4UmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJqc29uIiwibG9hZFNpbmdsZUNvbnRlbnRGaWxlIiwiZmlsZW5hbWUiLCJyZXNwb25zZSIsImNvbnRlbnQiLCJ0ZXh0IiwiZmlsZVR5cGUiLCJlbmRzV2l0aCIsImxvYWRBbGxDb250ZW50RmlsZXMiLCJjb250ZW50RmlsZXMiLCJjb21iaW5lZENvbnRlbnQiLCJsb2FkQ29udGVudEZpbGVzIiwiY3JlYXRlU3lzdGVtUHJvbXB0IiwiY29udGVudERhdGEiLCJnaXRodWJDb250ZXh0IiwibWVzc2FnZVJlcXVpcmVzR2l0aHViU3RhdHMiLCJtZXNzYWdlIiwibG93ZXJNZXNzYWdlIiwidG9Mb3dlckNhc2UiLCJzb21lIiwia2V5d29yZCIsImluY2x1ZGVzIiwiYnVpbGRHaXRIdWJVcmwiLCJlbmRwb2ludCIsImZldGNoR2l0SHViRGF0YSIsInVybCIsImVycm9yTWVzc2FnZSIsImVycm9yIiwiY29uc29sZSIsImZldGNoR2l0SHViU3RhdHMiLCJwcm9maWxlIiwicmVwb3NEYXRhIiwiZXZlbnRzRGF0YSIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwiZmV0Y2hHaXRIdWJSZXBvcyIsImZldGNoR2l0SHViRXZlbnRzIiwiZXh0cmFjdEJhc2ljUHJvZmlsZSIsInJlcG9zaXRvcmllcyIsInZhbHVlIiwicmVjZW50X2FjdGl2aXR5IiwicHVibGljX3JlcG9zIiwiZm9sbG93ZXJzIiwiZm9sbG93aW5nIiwiY3JlYXRlZF9hdCIsImJpbyIsImxvY2F0aW9uIiwiY29tcGFueSIsInJlcG9zIiwibWFwIiwidHJhbnNmb3JtUmVwbyIsImV2ZW50cyIsInRyYW5zZm9ybUV2ZW50IiwiYmluZCIsImZpbHRlciIsImV2ZW50IiwicmVwbyIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImxhbmd1YWdlIiwic3RhcnMiLCJzdGFyZ2F6ZXJzX2NvdW50IiwidXBkYXRlZF9hdCIsImh0bWxfdXJsIiwidHlwZSIsImFjdGlvbiIsImZvcm1hdEV2ZW50QWN0aW9uIiwiY29tbWl0Q291bnQiLCJwYXlsb2FkIiwiY29tbWl0cyIsImxlbmd0aCIsInJlZl90eXBlIiwicmVmIiwicmVwbGFjZSIsImZvcm1hdEdpdGh1YlN0YXRzRm9yQ29udGV4dCIsInN0YXRzIiwiZm9ybWF0QmFzaWNHaXRIdWJTdGF0cyIsImZvcm1hdFJlcG9zaXRvcmllc1NlY3Rpb24iLCJmb3JtYXRBY3Rpdml0eVNlY3Rpb24iLCJCb29sZWFuIiwiam9pbiIsIkRhdGUiLCJnZXRGdWxsWWVhciIsInNsaWNlIiwiZm9ybWF0UmVwb3NpdG9yeSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImFjdGl2aXRpZXMiLCJjb21taXRTdGF0cyIsImNhbGN1bGF0ZUNvbW1pdFN0YXRzIiwidG90YWxDb21taXRzIiwiYWN0aXZlUmVwb3MiLCJtb3N0UmVjZW50RGF0ZSIsIlNldCIsImZvckVhY2giLCJhY3Rpdml0eSIsInByb2Nlc3NBY3Rpdml0eUZvclN0YXRzIiwic2l6ZSIsImNvbW1pdE1hdGNoIiwibWF0Y2giLCJwYXJzZUludCIsInJlcG9OYW1lIiwiYWRkIiwiYWN0aXZpdHlEYXRlIiwiaW5pdGlhbGl6ZSIsImFkZE1lc3NhZ2VUb0hpc3RvcnkiLCJyb2xlIiwidGltZXN0YW1wIiwicHVzaCIsImdldEdpdGh1YkNvbnRleHRJZk5lZWRlZCIsImNyZWF0ZUVycm9yUmVzcG9uc2UiLCJwcm9jZXNzTWVzc2FnZSIsImdlbmVyYXRlQUlSZXNwb25zZSIsImVycm9yUmVzcG9uc2UiLCJidWlsZE1lc3NhZ2VzRm9yQUkiLCJjYWxsT3BlbkFJQVBJIiwibWVzc2FnZXMiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2RlbCIsIm1heF90b2tlbnMiLCJlcnJvckRhdGEiLCJjYXRjaCIsImNob2ljZXMiLCJjbGVhckhpc3RvcnkiLCJnZXRIaXN0b3J5IiwiY2hhdGJvdEluc3RhbmNlIiwiZ2V0Q2hhdGJvdEluc3RhbmNlIiwiYXN5bmMiLCJpbml0aWFsaXplQ2hhdGJvdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFwcGVuZENoaWxkIiwibG9nIiwiQ0hBVEJPVF9VSV9DT05GSUciLCJpc09wZW4iLCJzY3JvbGxUb0JvdHRvbSIsIm1lc3NhZ2VzQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsInNjcm9sbFRvIiwidG9wIiwic2Nyb2xsSGVpZ2h0IiwiYmVoYXZpb3IiLCJhZGRNZXNzYWdlIiwic2VuZGVyIiwiaXNFcnJvciIsIm1lc3NhZ2VFbGVtZW50IiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiZm9ybWF0dGVkQ29udGVudCIsInRvTG9jYWxlVGltZVN0cmluZyIsImhvdXIiLCJtaW51dGUiLCJpbm5lckhUTUwiLCJyZW1vdmVUeXBpbmdJbmRpY2F0b3IiLCJ0eXBpbmdFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9nZ2xlQ2hhdGJvdCIsImNoYXRib3RXaW5kb3ciLCJjbG9zZUNoYXRib3QiLCJzdHlsZSIsImRpc3BsYXkiLCJpbnB1dCIsInNldFRpbWVvdXQiLCJmb2N1cyIsInNlbmRNZXNzYWdlIiwidHJpbSIsInR5cGluZ0luZGljYXRvciIsInNob3dUeXBpbmdJbmRpY2F0b3IiLCJwcm9jZXNzTWVzc2FnZUZuIiwic2hvd1dlbGNvbWVNZXNzYWdlIiwiY2xlYXJDaGF0IiwiY2xlYXJIaXN0b3J5Rm4iLCJjcmVhdGVDaGF0Ym90Q29udGFpbmVyIiwidG9nZ2xlIiwiY2xvc2VCdG4iLCJmb3JtIiwiZSIsInByZXZlbnREZWZhdWx0Iiwia2V5Iiwic2hpZnRLZXkiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJhdHRhY2hFdmVudExpc3RlbmVycyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==