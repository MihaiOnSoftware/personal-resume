(()=>{var e={227:e=>{!function(){"use strict";const t={githubUsername:"mihaip",openaiModel:"gpt-3.5-turbo",maxTokens:150,temperature:.7,githubKeywords:["github","repository","repo","repositories","code","commits","contributions","followers","following","projects"]};class n{constructor(){this.htmlContent=null,this.systemPrompt=null,this.conversationHistory=[]}async loadContentIndex(){const e=await fetch("html-files-index.json");if(!e.ok)throw new Error(`Failed to load content files index: ${e.status}`);return e.json()}async loadSingleContentFile(e){const t=await fetch(e),n=await t.text(),o=e.endsWith(".md")?"Markdown":"HTML";return`\n\n=== Content from ${e} (${o}) ===\n${n}`}async loadAllContentFiles(e){let t="";for(const n of e)t+=await this.loadSingleContentFile(n);return t}async loadContentFiles(){const e=await this.loadContentIndex();return this.loadAllContentFiles(e)}createSystemPrompt(e,t=""){return`\n            You are Mihai Popescu, a software developer, chatting casually about yourself. Keep responses short and conversational.\n\n            Here is your complete website content and professional information:\n            ${e}\n\n            ${t}\n\n            TONE & STYLE:\n            - Talk like you're having a casual conversation with a friend\n            - Keep answers brief (1-2 sentences max unless asked for details)\n            - Use "I" naturally - you ARE Mihai\n            - Be enthusiastic but not over-the-top\n            - Skip formal language - be relaxed and approachable\n\n            GUIDELINES:\n            - Answer from the info above, but keep it concise\n            - If someone asks about tech stuff, mention it briefly then ask if they want more details\n            - For GitHub questions, I can pull live stats\n            - If you don't know something, just say so casually\n            - Use emojis sparingly (maybe 1 per response max)\n            `}messageRequiresGithubStats(e){const n=e.toLowerCase();return t.githubKeywords.some(e=>n.includes(e))}async fetchGitHubStats(){try{const e=await fetch(`https://api.github.com/users/${t.githubUsername}`);if(!e.ok)return null;const n=await e.json();return{public_repos:n.public_repos,followers:n.followers,following:n.following,created_at:n.created_at,bio:n.bio,location:n.location,company:n.company}}catch(e){return console.error("Error fetching GitHub stats:",e),null}}formatGithubStatsForContext(e){return`\n            CURRENT GITHUB STATISTICS:\n            - Public repositories: ${e.public_repos}\n            - Followers: ${e.followers}\n            - Following: ${e.following}\n            - Member since: ${new Date(e.created_at).getFullYear()}\n            - Bio: ${e.bio}\n            - Location: ${e.location}\n            - Company: ${e.company}\n            `}async initialize(){this.htmlContent||(this.htmlContent=await this.loadContentFiles(),this.systemPrompt=this.createSystemPrompt(this.htmlContent))}addMessageToHistory(e,t){const n={role:e,content:t,timestamp:new Date};return this.conversationHistory.push(n),n}async getGithubContextIfNeeded(e){if(!this.messageRequiresGithubStats(e))return"";const t=await this.fetchGitHubStats();return t?this.formatGithubStatsForContext(t):""}createErrorResponse(e){return e.message.includes("429")||e.message.includes("high demand")?"I'm currently experiencing high demand. Please wait a moment and try again. 🕐":"I'm sorry, I encountered an error processing your message. Please try again."}async processMessage(e){await this.initialize(),this.addMessageToHistory("user",e);try{const t=await this.getGithubContextIfNeeded(e),n=await this.generateAIResponse(e,t);return this.addMessageToHistory("assistant",n),n}catch(e){console.error("Error processing message:",e);const t=this.createErrorResponse(e);return this.addMessageToHistory("assistant",t),t}}buildMessagesForAI(e,t){return[{role:"system",content:this.createSystemPrompt(this.htmlContent,t)},...this.conversationHistory.slice(-10),{role:"user",content:e}]}async callOpenAIAPI(e){const n=await fetch("/api/chat",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:t.openaiModel,messages:e,max_tokens:t.maxTokens,temperature:t.temperature})});if(!n.ok){const e=await n.json().catch(()=>({}));throw new Error(e.error||`Server error: ${n.status}`)}return(await n.json()).choices[0].message.content}async generateAIResponse(e,t){const n=this.buildMessagesForAI(e,t);return this.callOpenAIAPI(n)}clearHistory(){this.conversationHistory=[]}getHistory(){return[...this.conversationHistory]}}let o=null;function s(){return o||(o=new n),o}async function a(e){return s().processMessage(e)}function i(){s().clearHistory()}function r(){return s().getHistory()}async function c(){return s().initialize()}e.exports&&(e.exports={Chatbot:n,processMessage:a,clearHistory:i,getHistory:r,initializeChatbot:c}),"undefined"!=typeof window&&(window.processMessage=a,window.clearHistory=i,window.getHistory=r,window.initializeChatbot=c)}()},5694:(e,t,n)=>{"use strict";n(227),n(6882),document.addEventListener("DOMContentLoaded",function(){let e=document.getElementById("chatbot-container");e||(e=document.createElement("div"),e.id="chatbot-container",document.body.appendChild(e)),console.log("Chatbot initialized successfully")})},6882:e=>{!function(){"use strict";const t="chatbot-container";let n=!1;function o(){const e=document.querySelector(".chatbot-messages");e&&e.scrollTo({top:e.scrollHeight,behavior:"smooth"})}function s(e,t,n=!1){const s=document.querySelector(".chatbot-messages");if(!s)return;const a=document.createElement("div");a.className=`message ${t}`,n&&a.classList.add("error");const i=e.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/\n/g,"<br>").replace(/(content\/[^\s]+\.html)/g,'<a href="$1" target="_blank" class="chatbot-link">$1</a>').replace(/^• /gm,'<span class="bullet">•</span> '),r=(new Date).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"});a.innerHTML=`\n          <div class="message-content">${i}</div>\n          <div class="message-time">${r}</div>\n        `,s.appendChild(a),o()}function a(e){e&&e.parentNode&&e.parentNode.removeChild(e)}function i(){const e=document.querySelector(".chatbot-window"),t=document.querySelector(".chatbot-notification");if(e)if(n)r();else{e.style.display="flex",n=!0,t&&(t.style.display="none");const o=document.querySelector(".chatbot-input");o&&setTimeout(()=>o.focus(),100)}}function r(){const e=document.querySelector(".chatbot-window");e&&(e.style.display="none",n=!1)}async function c(e){if(!e.trim())return;s(e,"user");const t=function(){const e=document.querySelector(".chatbot-messages");if(!e)return null;const t=document.createElement("div");return t.className="message bot typing",t.innerHTML='\n          <div class="message-content">\n            <div class="typing-indicator">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        ',e.appendChild(t),o(),t}();try{const n="undefined"!=typeof window&&window.processMessage?window.processMessage:"undefined"!=typeof processMessage?processMessage:null;if(!n)throw new Error("processMessage function not available");const o=await n(e);a(t),s(o,"bot")}catch(e){a(t),console.error("Error sending message:",e),s("Sorry, I encountered an error. Please try again.","bot",!0)}}function l(){setTimeout(()=>{s("👋 Hi there! I'm an AI assistant that can answer questions about Mihai Popescu. I know about his experience, skills, projects, and can even fetch his latest GitHub stats. What would you like to know?","bot")},500)}function u(){const e=document.querySelector(".chatbot-messages");e&&(e.innerHTML="");const t="undefined"!=typeof window&&window.clearHistory?window.clearHistory:"undefined"!=typeof clearHistory?clearHistory:null;t&&t(),l()}e.exports&&(e.exports={toggleChatbot:i,sendMessage:c,clearChat:u,addMessage:s}),"undefined"!=typeof window&&(window.toggleChatbot=i,window.clearChat=u,window.sendMessage=c,window.addMessage=s),document.addEventListener("DOMContentLoaded",function(){(function(){let e=document.getElementById(t);return e||(e=document.createElement("div"),e.id=t,document.body.appendChild(e)),e}()).innerHTML='\n      <div class="chatbot-toggle" title="Chat with AI Assistant">\n        <i class="fas fa-comments"></i>\n        <div class="chatbot-notification">💬</div>\n      </div>\n      \n      <div class="chatbot-window" style="display: none;">\n        <div class="chatbot-header">\n          <div class="chatbot-title">\n            <i class="fas fa-robot"></i>\n            <span>Ask about Mihai</span>\n          </div>\n          <button class="chatbot-close" title="Close chat">\n            <i class="fas fa-times"></i>\n          </button>\n        </div>\n        \n        <div class="chatbot-messages"></div>\n        \n        <div class="chatbot-input-container">\n          <form class="chatbot-input-form">\n            <input \n              type="text" \n              class="chatbot-input" \n              placeholder="Ask me about my experience, skills, or projects..."\n              autocomplete="off"\n            />\n            <button type="submit" class="chatbot-send" title="Send message">\n              <i class="fas fa-paper-plane"></i>\n            </button>\n          </form>\n        </div>\n      </div>\n    ',function(){const e=document.querySelector(".chatbot-toggle"),t=document.querySelector(".chatbot-close"),n=document.querySelector(".chatbot-input-form"),o=document.querySelector(".chatbot-input");e&&e.addEventListener("click",i),t&&t.addEventListener("click",r),n&&n.addEventListener("submit",e=>{e.preventDefault();const t=o.value.trim();t&&(c(t),o.value="")}),o&&o.addEventListener("keypress",e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),n&&n.dispatchEvent(new Event("submit")))})}(),l()})}()}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(227),n(6882),n(5694)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,